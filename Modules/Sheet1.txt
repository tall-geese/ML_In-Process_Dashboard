VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Sheet1"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit

Dim lastCellRange As Range
Dim pieChart As Excel.shape
Dim tempAddy As String

'*************************************************************
'*************************************************************
'*                  ShopStatus
'*
'*************************************************************
'*************************************************************


'************************************************************
'*************   Cleanup/Fill Routines   ********************
'************************************************************


Public Sub Cleanup()
    Unprotect PASSWORD:=Config.PASSWORD
    With Rows("1:100")
        .Clear
        .RowHeight = 18
    End With
    Cells.NumberFormat = "@"
    Set lastCellRange = Nothing
    
    Call DestroyCharts
End Sub


Public Sub AddCell(cellName As String)
    If lastCellRange Is Nothing Then
        Set lastCellRange = Range("A1")
    Else
        Set lastCellRange = lastCellRange.Offset(2, 0)
    End If
    
    Dim headerRange As Range
    Set headerRange = Range("A" & lastCellRange.Row & ":" & "H" & lastCellRange.Row)
    With headerRange
        .Font.ColorIndex = 2
        .Font.Size = 8
        .HorizontalAlignment = xlCenter
        .Interior.color = RGB(128, 128, 128)
    End With
    With lastCellRange
        .Value = cellName
        .Font.Bold = True
        .Font.ColorIndex = 2
        .Font.Size = 11
        .HorizontalAlignment = xlCenter
    End With
    
    lastCellRange.Offset(0, 1).Value = "Machine"
    lastCellRange.Offset(0, 2).Value = "Job#"
    lastCellRange.Offset(0, 3).Value = "Drawing#"
    lastCellRange.Offset(0, 4).Value = "Part#"
    lastCellRange.Offset(0, 5).Value = "Rev"
    lastCellRange.Offset(0, 6).Value = "Desc"
    lastCellRange.Offset(0, 7).Value = "Status"

    lastCellRange.EntireRow.RowHeight = 14

End Sub


Public Sub AddJob(jobInfo() As Variant)
    'TODO: check if the lastCellRange is Nothing, in which case, we should error out
    Set lastCellRange = lastCellRange.Offset(1, 0)
    Dim jobRange As Range
    Set jobRange = Range("B" & lastCellRange.Row & ":" & "H" & lastCellRange.Row)
    jobRange = jobInfo
    jobRange.HorizontalAlignment = xlCenter
    With jobRange.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .color = RGB(128, 128, 128)
        .Weight = xlThin
    End With
    
    Range("G" & lastCellRange.Row).HorizontalAlignment = xlLeft
    If lastCellRange.Offset(0, 7).Value = "[Setup]" Then
        lastCellRange.EntireRow.Font.color = RGB(128, 128, 128)
    End If
    SetPicture Range("H" & lastCellRange.Row)
    
    
End Sub

Private Sub SetPicture(Target As Range)
    Dim picture As Object
    Dim picAddy As String
    Dim colorFill As Single
    
        'TODO: we want to establish a warning sign based on the desired amount of inspections to alert the PQCI
    Select Case Target.Value
        Case "[Setup]"   'When setup is not 100%, There isnt going to be much to see here
            picAddy = "https://cdn.hubblecontent.osi.office.net/icons/publish/icons_gears/gears.svg"
            colorFill = RGB(128, 128, 128)
        Case "[Production]"  'TODO: might get rid of this, I can usually assume that its in production
'            picAddy = "https://cdn.hubblecontent.osi.office.net/icons/publish/icons_arrowcircle/arrowcircle.svg"
        Case Else  'Question Mark - issue with retriveing the data
            picAddy = "https://cdn.hubblecontent.osi.office.net/icons/publish/icons_questionmark_ltr/questionmark_ltr.svg"
            Exit Sub
    End Select
    
    Target.Value = ""
    If picAddy = "" Then Exit Sub
    Set picture = Shapes.AddPicture(picAddy, False, True, Top:=Target.Top, left:=Target.left + 15, Height:=20, Width:=20)
    
    If colorFill <> 0 Then
        picture.Fill.ForeColor.RGB = colorFill
    End If
    
End Sub

Public Sub FinishTransfer()
    Protect PASSWORD:=Config.PASSWORD
    tempAddy = lastCellRange.Address
End Sub





'************************************************************
'****************   Event Callbacks   ***********************
'************************************************************



Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    
    If Target.Areas.Count <> 1 Then Exit Sub
    If Target.Count <> 1 Then Exit Sub
    
    
    Dim validSelection As Boolean
    
    
    
    'TODO: temp manual setting until we figure out what to do with this missing reference
    'TODO dont hardset the range here, must find it manually
    If lastCellRange Is Nothing Then
        Set lastCellRange = Range("A25")
    End If
    
    On Error GoTo selectionErr
    
    Me.Unprotect Config.PASSWORD
    
        'If user selected information about the active job in the Viewport
    If Not (Application.Intersect(Range("K2:K8"), Target) Is Nothing) Then
        Range("J2:J8").Value = ""
        Target.Offset(0, -1).Value = ">"
        Range("K2:N8").Interior.ColorIndex = 0
        Range(Target.Address & ":N" & Target.Row).Interior.color = RGB(101, 215, 255)
        
        Select Case Target.Address
            Case "$K$2"  'Setup
            
            Case "$K$4" 'Last Insepction
            
            Case "$K$6"  'Parts Completed /Required
                Call CreateLaborQtyDoughnut
            Case "$K$8"  'Hours Remaining
                Call CreatePrdHoursDoughnut
            Case Else
                'Doesn't make sense
        End Select
        
    
    Else  'If user selected a new job Row, these are the only other unprotected cells
        Dim subCell As Range
        Dim jobRange As Range
        Set jobRange = Range("A1:" & lastCellRange.Address).Offset(0, 1)
        
        'Cell Highlighting
        For Each subCell In jobRange
                'reset previously highlighted cells to blank
            If subCell.Interior.color = RGB(101, 215, 255) Then
                Range("B" & subCell.Row & ":" & "H" & subCell.Row).Interior.ColorIndex = 0
            End If
    
                'set the intersection row of the selected job to blue bg
                'TODO: EntireRow checks are slow, we should only have a selectable area anyway, try and limit this
            If Not (Application.Intersect(subCell, Target.EntireRow) Is Nothing) And subCell.Interior.color <> RGB(128, 128, 128) Then
                Range("B" & subCell.Row & ":" & "H" & subCell.Row).Interior.color = RGB(101, 215, 255)
                validSelection = True
            End If
        Next subCell
        
        If validSelection = False Then GoTo 10  'If they selected a header or something then leave after unsetting the previous selection
        
        Dim jobCell As Range
        Set jobCell = Target.Offset(0, GetCol("Job#") - Target.Column)
        If jobCell.Value = "" Then GoTo 10
        Dim rowNum As Integer
        rowNum = Sheets("ShopLoad").GetJobInd(jobCell.Value).Row
                                                
            'Update the JobInfo Viewport
        Call updatedJobInfo(rowNumber:=rowNum)
                                                
        
            'What job Information do we currently want called?
                'The appropriate charts will be generated depending on this
                'If this function returned nothing then Hours Remaining will have been selected by default
        Dim infoRange As Range
        Set infoRange = GetJobInfoSelection()
        
        Select Case infoRange.Address
            Case "$K$2"  'Setup Info
            
            Case "$K$4"  'Last Inspection Info
            
            Case "$K$6"  'Parts Completed / Required
                Call CreateLaborQtyDoughnut(jobCell:=jobCell)
            
            Case "$K$8"  'Hours Remaining
                Call CreatePrdHoursDoughnut(jobCell:=jobCell)
            Case Else
                'Shouldnt happen
        End Select
        
    End If
    
10
    
    Me.Protect Config.PASSWORD
    Application.EnableEvents = True
    Exit Sub
    
selectionErr:
    GoTo 10

End Sub

'************************************************************
'****************   JobInfo Viewport   **********************
'************************************************************

'Called by _SelectionChange
Private Sub updatedJobInfo(rowNumber As Integer)
    Dim indRange As Range
    Set indRange = Sheets("ShopLoad").Range("A" & rowNumber)
    
    Range("K1").Value = indRange.Offset(0, Sheets("ShopLoad").GetCol("JobNum") - indRange.Column).Value  'Job# Header
    Range("K3").Value = indRange.Offset(0, Sheets("ShopLoad").GetCol("FA Type") - indRange.Column).Value
    Range("M3").Value = indRange.Offset(0, Sheets("ShopLoad").GetCol("Set%") - indRange.Column).Value & "%"
    
    If Range("M3").Value = "100%" Then
        Range("N3").Value = "þ"
    Else
        Range("N3").Value = "o"
    End If
    
    Range("N5").Value = indRange.Offset(0, Sheets("ShopLoad").GetCol("AQL") - indRange.Column).Value
    Range("K7").Value = indRange.Offset(0, Sheets("ShopLoad").GetCol("Qty Complete") - indRange.Column).Value
    Range("M7").Value = indRange.Offset(0, Sheets("ShopLoad").GetCol("Run Qty") - indRange.Column).Value
    Range("N8").Value = indRange.Offset(0, Sheets("ShopLoad").GetCol("Est Rem Hrs") - indRange.Column).Value
    
    
    'TODO: This will also require an update to the sparkline in the Parts Completed/ Required section

End Sub

'Called by _SelectionChange
    'Find out which of the Job SubCategories is currently active, we switch on this to figure out what chart info to load
Private Function GetJobInfoSelection() As Range
    Dim info As Range
    Set info = Range("K2, K4, K6, K8")
    Dim subCell As Range
    
    For Each subCell In info
        If subCell.Interior.color = RGB(101, 215, 255) And subCell.Offset(0, -1).Value = ">" Then
            Set GetJobInfoSelection = subCell
        End If
    Next subCell
    
    'TESTING this out, if we didnt have anything for JobInfo selected already, we should select the hours remaining and let the event callback handle it
        'from there. Should ultimately end up calling the same function
    If GetJobInfoSelection Is Nothing Then
            Range("K8").Select
    End If
    
End Function

'************************************************************
'**************   Chart Call Routines   *********************
'************************************************************

'called by the _onSelectionChange
'Get the job Number and then create the data structures and pass to Main Chart Creation Routines
'For them to do their thing
'Sheets("ShopLoad").Range("$I$" & rowNum & ":$J$" & rowNum)
Private Sub CreatePrdHoursDoughnut(Optional jobCell As Range)
    If jobCell Is Nothing Then
        Set jobCell = GetActiveJob()
        If jobCell Is Nothing Then Exit Sub
    End If
    

    Dim indCell As Range
    Dim lastActiveCell As Range
    Set indCell = Sheets("ShopLoad").GetJobInd(jobCell.Value)
    Set lastActiveCell = activeCell
    
        'TODO: Maybe only have these here Temporarily, we will have to call it for every type of chart update
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    jobCell.Activate

    Dim Yrange As Range
    Dim Xrange As Range
    Dim colors(1 To 2, 1 To 3) As Variant
    
        'TODO: this will prob need to be a 2d array
    colors(1, 3) = Config.COLOR_1
    colors(2, 3) = Config.COLOR_8
    
    Set Yrange = indCell.Offset(0, Sheets("ShopLoad").GetCol("Prod Hrs") - indCell.Column)
    Set Yrange = Application.Union(Yrange, Yrange.Offset(0, 1))
    
    Set Xrange = Sheets("ShopLoad").Range("$I$1:$J$1")
    
    Call CreateDoughnutChart(Xrange:=Xrange, Yrange:=Yrange, colors:=colors)

    lastActiveCell.Activate

    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Sub

Private Sub CreateLaborQtyDoughnut(Optional jobCell As Range)
    If jobCell Is Nothing Then
        Set jobCell = GetActiveJob()
        If jobCell Is Nothing Then Exit Sub
    End If
    
    Dim indCell As Range
    Dim opNum As String
    Dim colors() As Variant
    Dim lastActiveCell As Range
    Set indCell = Sheets("ShopLoad").GetJobInd(jobCell.Value)
    opNum = indCell.Offset(0, Sheets("ShopLoad").GetCol("Op Seq") - indCell.Column).Value
    
    Set lastActiveCell = activeCell
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
       
    jobCell.Activate
       
    Dim Xrange As Range
    Dim Yrange As Range
    Set Xrange = Sheets("ProdInfo").GetProductionLaborData(jobNum:=jobCell.Value, opNum:=opNum, colors:=colors)
    If Xrange Is Nothing Then Exit Sub  'TODO: maybe we fail less quietly here, but for setup jobs there really wont be anything
    Set Xrange = Sheets("ProdInfo").GetProductionLaborDataSUM(jobNum:=jobCell.Value)
    
    Set Yrange = Xrange.Offset(0, 1)
    
    Call CreateDoughnutChart(Xrange:=Xrange, Yrange:=Yrange, colors:=colors)
    
    lastActiveCell.Activate

    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Sub

Public Sub DestroyCharts()
    Me.Unprotect PASSWORD:=Config.PASSWORD

    On Error Resume Next
    Me.Shapes("Doughnut").Delete
    Dim im As Excel.shape
    For Each im In Me.Shapes
        With im.Chart
        .Delete
        End With
        im.Delete
    Next im
    
    Set pieChart = Nothing
    Me.Protect PASSWORD:=Config.PASSWORD
End Sub


'************************************************************
'*********   MAIN Chart Creation Routines   *****************
'************************************************************

Public Sub CreateDoughnutChart(Xrange As Range, Yrange As Range, colors() As Variant)

    If pieChart Is Nothing Then
    
        'If we haven't made a chart yet
            'Create new at the top right of the DashView
'        On Error Resume Next
'        Me.Shapes("Doughtnut").Delete
'        On Error GoTo 0
            
            
        Set pieChart = Me.Shapes.AddChart2(-1, xlDoughnutExploded, left:=850, Top:=ActiveWindow.VisibleRange.Top + 5, Height:=150, Width:=200)
        pieChart.Title = ""
        
        With pieChart.Chart
            .ChartTitle.Delete
            .ChartGroups(1).DoughnutHoleSize = 73
            .Legend.Position = xlRight
            .Legend.Height = 40
            .Legend.Width = 60
            .Legend.Top = 40
            .Legend.left = 135
        End With
    End If
    
        'New/Update Parameters
            'have to reset some values of the datalabels regardless of new/used chart
    With pieChart.Chart
        .SeriesCollection(1).XValues = Xrange
        .SeriesCollection(1).Values = Yrange
        .ApplyDataLabels HasLeaderLines:=False, ShowSeriesName:=False, ShowCategoryName:=False, ShowValue:=True, ShowPercentage:=True
        .SeriesCollection(1).Explosion = 4
        .SeriesCollection(1).DataLabels.Select
        Selection.Format.Fill.Visible = 0
        Selection.Format.Line.Visible = 0
        Selection.Separator = "" & Chr(13) & ""
        
        Dim i As Integer
        For i = 1 To .SeriesCollection(1).Points.Count
            .SeriesCollection(1).Points(i).Format.Fill.ForeColor.RGB = colors(i, 3)
        Next i
        
        
            'TODO: what are we going to do about the label's position?
        .SeriesCollection(1).Points(2).DataLabel.Select
        Selection.left = 0
        Selection.Top = 0
        Selection.Width = 40
        Selection.Height = 25
        .SeriesCollection(1).Points(1).DataLabel.Select
        Selection.left = 40
        Selection.Top = 0
        Selection.Width = 40
        Selection.Height = 25
    End With
    
'    pieChart.OnAction = "ThisWorkbook.PrdHours_Click"

    pieChart.Name = "Doughnut"
    
End Sub


    'OLD BACKUP
Public Sub DEPRCreatePrdHoursChart(rowNum As Integer)

    GetActiveJob().Select

    'TODO: we are disabling events here because of selecting the charts
        'but prob want to do this at a higher level since we'll be adding/changin multiple charts
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    If pieChart Is Nothing Then
        'If we haven't made a chart yet
            'Create new at the top left of the DashView
        Set pieChart = Me.Shapes.AddChart2(-1, xlDoughnutExploded, left:=891, Top:=ActiveWindow.VisibleRange.Top + 5, Height:=100, Width:=140)
        pieChart.Title = ""
        
        With pieChart.Chart
            .ChartTitle.Delete
            .SeriesCollection(1).XValues = Sheets("ShopLoad").Range("$I$1:$J$1").Value
            .SeriesCollection(1).Values = Sheets("ShopLoad").Range("$I$" & rowNum & ":$J$" & rowNum)
            .SeriesCollection(1).Points(1).Format.Fill.ForeColor.RGB = Config.COLOR_PURPLE
            .SeriesCollection(1).Points(2).Format.Fill.ForeColor.RGB = Config.COLOR_BLUE
            .SeriesCollection(1).ApplyDataLabels HasLeaderLines:=False, ShowSeriesName:=False, ShowCategoryName:=False, ShowPercentage:=True, ShowValue:=True
            .ChartGroups(1).DoughnutHoleSize = 73
            .Legend.Position = xlRight
            .Legend.Height = 40
            .Legend.Top = 40
            .Legend.left = 80
            .SeriesCollection(1).DataLabels.Select
            Selection.Format.Fill.Visible = 0
            Selection.Format.Line.Visible = 0
            
        End With
    Else
        'If we already have a chart
            'Reset the Hours with the values from the new job
            
            
            'TODO Need to reset the Xvalues as well
        pieChart.Chart.SeriesCollection(1).Values = Sheets("ShopLoad").Range("$I$" & rowNum & ":$J$" & rowNum)
        pieChart.Chart.SeriesCollection(1).ApplyDataLabels HasLeaderLines:=False, ShowSeriesName:=False, ShowCategoryName:=False, ShowValue:=True, ShowPercentage:=True
    End If
    
        'New/Update Parameters
            'have to reset some values of the datalabels regardless of new/used chart
    With pieChart.Chart
        .SeriesCollection(1).Points(1).Format.Fill.ForeColor.RGB = Config.COLOR_PURPLE  'Todo: instead we should ask an outside function to do this
        .SeriesCollection(1).Points(2).Format.Fill.ForeColor.RGB = Config.COLOR_BLUE
        .SeriesCollection(1).Explosion = 4
        .SeriesCollection(1).DataLabels.Select
        Selection.Separator = "" & Chr(13) & ""
        .SeriesCollection(1).Points(2).DataLabel.Select
        Selection.left = 0
        Selection.Top = 0
        Selection.Width = 40
        Selection.Height = 25
        .SeriesCollection(1).Points(1).DataLabel.Select
        Selection.left = 40
        Selection.Top = 0
        Selection.Width = 40
        Selection.Height = 25
    End With
'    pieChart.OnAction = "ThisWorkbook.PrdHours_Click"

    pieChart.Name = "PrdHours"
    
    
    'TODO: again, this should prob be at a higher level
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
End Sub

Public Sub CreateProdQtyChart()
    Me.Unprotect PASSWORD:=Config.PASSWORD
    
    Dim myChart As shape
    Set myChart = Me.Shapes.AddChart2(-1, xlLineMarkers, left:=650, Top:=ActiveWindow.VisibleRange.Top + 360, Height:=170, Width:=415)
'    myChart.Title = "dcasdfc"
    myChart.Chart.ChartTitle.Text = "Production Qty Submitted"
    
    With myChart.Chart
'        .ChartTitle.Delete
        .SeriesCollection.NewSeries
        .SeriesCollection(1).Values = Sheets("ProdInfo").Range("$B$2:$B$16")
        .SeriesCollection(1).XValues = Sheets("ProdInfo").Range("$A$2:$A$16").Value
        .ApplyChartTemplate ("C:\Users\mdieckman\AppData\Roaming\Microsoft\Templates\Charts\LineSeries.crtx")
    End With
    
    myChart.Name = "TempName"
    
End Sub

Public Sub destroyNewChart()
    Me.Unprotect PASSWORD:=Config.PASSWORD
    On Error Resume Next
    Me.Shapes("TempName").Delete
    Me.Protect PASSWORD:=Config.PASSWORD


End Sub


'************************************************************
'***********   Worksheet Helper Functions   *****************
'************************************************************


'Return column # of the header
Public Function GetCol(colName As String) As Integer
    Dim colRange As Range
    Set colRange = Range("A1:H1")
    On Error Resume Next
    GetCol = Application.WorksheetFunction.Match(colName, colRange, 0)
    If Err.Number <> 0 Then
        GetCol = 0
    End If
    On Error GoTo 0
End Function


'TODO: Need a way to easily find the last job in our list of MeasurLink machines
Public Function GetJobCells() As Range
    Dim activeCell As Range
    Set activeCell = Range("C1")
    Dim collectedRange As Range

    Dim missCount As Integer
        
    Do
        If activeCell.Value <> "" Then
            missCount = 0
            If activeCell.Interior.color <> RGB(128, 128, 128) Then
                If collectedRange Is Nothing Then
                    Set collectedRange = activeCell
                Else
                    Set collectedRange = Application.Union(collectedRange, activeCell)
                End If
            End If
        Else
            missCount = missCount + 1
        End If
        
        Set activeCell = activeCell.Offset(1, 0)
        
    Loop While (missCount < 2)
    
    Set GetJobCells = collectedRange

End Function

    'What Job is currently Highlighted as Blue
    'Callign functions should check for Is Nothing
Private Function GetActiveJob() As Range
    Dim jobRange As Range
    Dim subCell As Range
    
    Set jobRange = GetJobCells()
    If jobRange Is Nothing Then Exit Function
    
    For Each subCell In jobRange
            'The active job is the blue highlighted cell
        If subCell.Interior.color = RGB(101, 215, 255) Then
            Set GetActiveJob = subCell
            Exit Function
        End If
    Next subCell

End Function


Private Sub TestOLD()
    Me.Unprotect "3063bqa"
    Application.Calculation = xlCalculationManual
    Call DEPRCreatePrdHoursChart(rowNum:=31)
    Application.Calculation = xlCalculationAutomatic
    Me.Protect "3063bqa"


End Sub





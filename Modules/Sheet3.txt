VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Sheet3"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Private Sub Cleanup()
    Rows("2:100").Clear
    Cells.NumberFormat = "@"
End Sub

Public Sub InitShopLoad()
    Call Cleanup
    Call Sheets("ShopStatus").Cleanup
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    Dim fso As FileSystemObject
    Set fso = New FileSystemObject
    Dim shopQuery As String
    shopQuery = fso.OpenTextFile(Config.QUERY_PATH & "JobLoad.sql", ForReading).ReadAll()
    
    Dim results() As Variant
    DBconnections.SQLQuery shopQuery, Connections.E10
    results = DBconnections.ResultRecordSet.GetRows()
    results = Application.Transpose(results)
    
    Dim fillRange As Range
    Set fillRange = Range(Cells(2, 1), Cells(UBound(results, 1) + 1, UBound(results, 2)))
    fillRange = results
    
    Set fillRange = Application.Union(fillRange, fillRange.Offset(0, 3))
    fillRange.FormatConditions.Add Type:=xlExpression, Operator:=xlEqual, _
        Formula1:="=$V2=" & Chr(34) & "TRUE" & Chr(34)
    fillRange.FormatConditions(1).Interior.Color = RGB(248, 203, 173)
    fillRange.HorizontalAlignment = xlCenter
    
    Call FillCustomers
    Call SetMLReady
    Call SetAQLforMLJobs
    Call Sheets("ShopStatus").Cleanup
    Call SetMLJobs
    Call Sheets("ShopStatus").FinishTransfer
    
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

Public Sub FillCustomers()
    Dim workingRange As Range
    Set workingRange = Range("A2:A" & Range("A2").End(xlDown).Row)
    
    Dim projId As String
    Dim cusName As String
    Dim jobNum As String
    Dim parseAttempt As Boolean
    
    For Each subCell In workingRange
        jobNum = subCell.Offset(0, 3).Value  'JobNum
        If subCell.Offset(0, 12).Value <> "" Then  'Value of ProjID
            projId = subCell.Offset(0, 12).Value
checkProj:
            'TODO: set an error handling here
            DBconnections.SQLQuery "SELECT pr.Character01 FROM EpicorLive10.dbo.Project pr WHERE pr.ProjectID='" & projId & "'", Connections.E10
            If DBconnections.ResultRecordSet.EOF Then GoTo 10
                'Get the Epicor Abbreivavtion attached to the project ID
            cusName = DBconnections.ResultRecordSet.Fields(0)
            If cusName = "" Then GoTo 10
            
checkAbbr:
            'TODO: Different error handling here? SHould be a msg that a QE needs to add in a translation field or something
            DBconnections.SQLQuery "SELECT ct.CustomerName FROM InspectionKiosk.dbo.CustomerTranslation ct WHERE ct.Abbreviation='" & cusName & "'", Connections.Kiosk
                'Get the Fully Qualified name
            If DBconnections.ResultRecordSet.EOF Then GoTo TranslateError
            cusName = DBconnections.ResultRecordSet.Fields(0)
            subCell.Offset(0, 20).Value = cusName
        Else
10
            If parseAttempt = True Then GoTo IDError
            If (Not (IsNumeric(left(jobNum, 1))) And Not (IsNumeric(Mid(jobNum, 2, 1)))) Then
                If UCase(left(jobNum, 1)) = "R" Then
                    If (IsNumeric(Mid(jobNum, 3, 1))) Then 'RD0000
                        cusName = left(jobNum, 2)
                    Else 'RNV0000
                        cusName = Mid(jobNum, 2, 2)
                    End If
                Else 'NV0000
                    cusName = left(jobNum, 2)
                    If cusName = "QA" Or cusName = "ME" Then GoTo IDError 'TODO: assuming we got here with no project id, then we have to give up
                End If
                GoTo checkAbbr
            Else '003671-4-1, extract the 3671
                Dim i As Integer
                Dim dig As String
                Dim removedLeading As Boolean
                Do
                    dig = Mid(jobNume, i, 1)
                    If IsNumeric(dig) And dig <> "0" Then   'Filters out any P's, R's or 0's leading up to the true Proj Id
                        projId = projId & dig
                        removedLeading = True
                    ElseIf dig = "0" And removedLeading = True Then
                        projId = projId & dig       'Once we have any leading 0's filtered out, its fine to include trialing 0's
                    End If
                    i = i + 1
                Loop While Mid(jobNum, i, 1) <> "-"
            End If
                    'Set a flag to avoid inf loop
                parseAttempt = True
                GoTo checkProj
        End If
    
NextCell:
'reset vars
        projId = ""
        cusName = ""
        cusName = ""
        jobNum = ""
        parseAttempt = False
    Next subCell
    
    
    Exit Sub
    
IDError:
    MsgBox "We couldn't find a Customer Name for [ProjID]: " & projId & vbCrLf & "For [JobNumber]: " & jobNum _
        & "Couldnt determine if MeasurLink job or Not, Add a Customer Name to Project Entry in E10", vbCritical
    GoTo NextCell
    
TranslateError:
    MsgBox "Found the Customer [Abbreviation]: " & cusName & " For the [JobNumber]: " & jobNum & vbCrLf & "But this couldn't be translated into a directory for Inspection Reports" _
            & "Ask a QE to add this to the InspectionKiosk.CustomerTranslation database" & vbCrLf & vbCrLf _
            & "Not enough information to determine if this was a MeasurLink Inspection Plan or Not", vbCritical
    GoTo NextCell
End Sub

Public Sub SetMLReady()
    Dim workingRange As Range
    Set workingRange = Range("A2:A" & Range("A2").End(xlDown).Row)
    
    Dim jobNum As String
    Dim partNum As String
    Dim rev As String
    Dim machType As String
    
    For Each subCell In workingRange
        jobNum = subCell.Offset(0, 3).Value
        partNum = subCell.Offset(0, 5).Value
        rev = subCell.Offset(0, 6).Value
        machType = subCell.Offset(0, 18).Value
        
        If DBconnections.IsMeasurLinkJob(jobNum, partNum, rev, machType) Then
            subCell.Offset(0, 21).Value = "TRUE"
        Else
            subCell.Offset(0, 21).Value = "FALSE"
        End If

    Next subCell

End Sub


Public Sub SetAQLforMLJobs()
    Dim workingRange As Range
    Set workingRange = Range("A2:A" & Range("A2").End(xlDown).Row)
    Dim fso As FileSystemObject
    Set fso = New FileSystemObject
    
    On Error GoTo ExcelOLEDBerr
    For Each subCell In workingRange
        If subCell.Offset(0, 21).Value = "TRUE" Then   'If ML_Rdy
            Dim cust As String
            Dim drawing As String
            Dim path As String
            Dim fname As String
            cust = subCell.Offset(0, 20).Value
            drawing = subCell.Offset(0, 4).Value
            
            path = "J:\Inspection Reports\" & cust & "\" & drawing
            fname = Dir(path & "\Current Revision\" & "*.xlsm")  'Search for IR in current rev first
            
            If fname <> "" Then
                subCell.Offset(0, 22).Value = GetXLAQL(path & "\Current Revision\" & fname)
            Else
                fname = Dir(path & "\Draft\" & "*.xlsm") 'If not found, search in Draft
                If fname <> "" Then
                    subCell.Offset(0, 22).Value = GetXLAQL(path & "\Draft\" & fname)
                Else
                    MsgBox "Couldnt find anything for " & subCell.Offset(0, 3).Value, vbCritical
                End If
            End If
            
        End If
contSubCell:
    Next subCell

    Exit Sub

ExcelOLEDBerr:
    MsgBox Err.Description & vbCrLf & subCell.Offset(0, 3).Value & vbTab & subCell.Offset(0, 4).Value, vbCritical
    On Error GoTo -1
    GoTo contSubCell
End Sub

Private Sub SetMLJobs()
    Dim workingRange As Range
    Set workingRange = Range("A2:A" & Range("A2").End(xlDown).Row)
    Dim lastCell As String
    
    For Each subCell In workingRange
        If subCell.Offset(0, 21).Value <> "TRUE" Then GoTo NextCell
        
        If subCell.Value <> lastCell Then
            lastCell = subCell.Value
            Sheets("ShopStatus").AddCell (Mid(subCell.Value, 1, Len(subCell.Value) - 1) & " " & Mid(subCell.Value, Len(subCell.Value), 1))
        End If
        
        Dim jobInfo(0 To 6) As Variant
        With subCell
            jobInfo(0) = left(.Offset(0, 1).Value, Len(.Offset(0, 1).Value) - 11) 'Machine
            jobInfo(1) = .Offset(0, 3).Value 'Job#
            jobInfo(2) = .Offset(0, 4).Value 'Draw#
            jobInfo(3) = .Offset(0, 5).Value 'Part#
            jobInfo(4) = .Offset(0, 6).Value 'Rev
            jobInfo(5) = .Offset(0, 7).Value 'Description
            If .Offset(0, 10).Value <> "100" Then
                jobInfo(6) = "[Setup]"
            Else
                jobInfo(6) = "[Production]"
            End If
        End With
        
        Sheets("ShopStatus").AddJob (jobInfo)
    
NextCell:
    Next subCell
    



End Sub






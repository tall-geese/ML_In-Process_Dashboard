VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Sheet5"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit

Private Const RT_WIN_SIZE = 2
Private Const FT_WIN_SIZE = 14

Dim rtWinOffset As Integer
Dim ftWinOffset As Integer
Dim RefJob As String
Dim RefRoutine As String
Dim RefJobCell As Range

Public Sub Clear()
    Cells.Clear
    Cells.NumberFormat = "@"
End Sub


Public Function GetInitFeatures(jobNum As String, ByRef rtCells As Collection, ByRef ftCells As Collection)
    If Not (rtCells Is Nothing) Or Not (ftCells Is Nothing) Then Exit Function  'Should be empty
    Dim jobCell As Range
    'TODO: Reset all of the header values to the default, set the new jobCell here once we find it...
    rtWinOffset = 0
    ftWinOffset = 0
    
    If Range("A1").Value = "" Then
        Set jobCell = Range("A1")
        GoTo 10
    Else
        Set jobCell = Range(Cells(1, 1), Cells(Rows.Count, 1).End(xlUp)).Find(jobNum, MatchCase:=False)
    End If
    
    If jobCell Is Nothing Then
        Set jobCell = Range("A" & Application.WorksheetFunction.Max(Cells(Rows.Count, "A").End(xlUp).row, Cells(Rows.Count, "B").End(xlUp).row) + 3)
10
        Dim indCell As Range
        Dim partNum As String
        Dim rev As String
        Dim faType As String
        
        Set indCell = Worksheets("ShopLoad").GetJobInd(jobNum)
        partNum = indCell.Offset(0, Worksheets("ShopLoad").GetCol("Part#") - indCell.column)
        rev = indCell.Offset(0, Worksheets("ShopLoad").GetCol("Rev") - indCell.column)
        faType = indCell.Offset(0, Worksheets("ShopLoad").GetCol("FA Type") - indCell.column)
        
        Call LoadJobFeatures(jobCell:=jobCell, jobNum:=jobNum, partNum:=partNum, rev:=rev, faType:=faType)
    End If
      
    'TODO: At this point, we want to check if any routines at all were loaded
    If jobCell.Offset(0, 1).Value = "" Then
        'Raise error here
        Exit Function
    End If
    
    Set rtCells = New Collection
    Set ftCells = New Collection
    Dim i As Integer
    Dim j As Integer
    
    For i = 1 To RT_WIN_SIZE
        rtCells.Add jobCell.Offset(i - 1, 1)
        For j = 1 To FT_WIN_SIZE
            ftCells.Add jobCell.Offset(i - 1, 1).Offset(0, j)
        Next j
    Next i
        
    Set RefJobCell = jobCell
    'At the very end here, set the jobCell header equal to the jobCell we ultimately found

End Function


Private Sub LoadJobFeatures(jobCell As Range, jobNum As String, partNum As String, rev As String, faType As String)
    'Likely will also need some more data like
    
    'TODO: error handle here
    
    
    Dim routineResults() As Variant
    Dim faRoutine As String
    jobCell.Value = jobNum
    
    
    Select Case faType
        Case "None"
            faRoutine = "%FA_VIS%"
        Case "Full"
            faRoutine = "%FA_FIRST%"
        Case "Mini"
            faRoutine = "%FA_MINI%"
        Case Else
            'TODO: error out
    End Select
    
    
    routineResults = DBconnections.GetJobUnqiueRoutines(partNum:=partNum, rev:=rev, faRoutine:=faRoutine)
    'TODO: error handle on No Results

    routineResults = Application.WorksheetFunction.Transpose(routineResults)
    
    
    Dim rtFillRange As Range
    Dim rtCell As Range
    Set rtFillRange = Range(jobCell.Offset(0, 1), jobCell.Offset(UBound(routineResults, 1) - 1, 1))
    
    rtFillRange = routineResults 'Set Routine List
    
    
    For Each rtCell In rtFillRange
        Dim results() As Variant
        Dim features() As Variant
        Dim inspTypes() As Variant
        results = DBconnections.GetRoutineFeatures(jobNum:=jobNum, rtName:=rtCell.Value)
        results = Application.WorksheetFunction.Transpose(results)
        
        'TODO: what if we have a single result value, how to handle
        features = Application.index(results, , 1)
        inspTypes = Application.index(results, , 2)
        
        Dim i As Integer
        For i = 1 To UBound(features, 1)
            With rtCell.Offset(0, i)
                .Value = features(i, 1)
                If inspTypes(i, 1) = 0 Then
                    .Font.color = RGB(102, 46, 155)
                End If
            
            End With
        
        Next i
NextRoutine:
    Next rtCell
    
    'Must replace the names of the routine to be easier to read.... maybe


End Sub




Public Function FeaturesAhead() As Boolean



End Function


Public Function FeaturesBehind() As Boolean



End Function

Public Function RoutinesAhead() As Boolean



End Function


Public Function RoutinesBehind() As Boolean



End Function





Private Sub TestLoadFeatures()
    Dim jobCell As Range
    Dim jobNum As String
    Dim partNum As String
    Dim rev As String
    Dim faType As String
    
    Set jobCell = Range("A1")
    jobNum = "NV16783"
    partNum = "1907018"
    rev = "B"
    faType = "None"
    
    Call LoadJobFeatures(jobCell:=jobCell, jobNum:=jobNum, partNum:=partNum, rev:=rev, faType:=faType)
End Sub

Private Sub TestGetInitFeatures()
    Dim rtColl As Collection
    Dim ftColl As Collection
    
    Dim jobNum As String
    jobNum = "NV16783"
    
    Call Clear
    Call GetInitFeatures(jobNum:=jobNum, rtCells:=rtColl, ftCells:=ftColl)
    
    Call QuickSpitoutTest(rtCells:=rtColl, ftCells:=ftColl)
    
    Debug.Print ("here")

End Sub

Private Sub QuickSpitoutTest(rtCells As Collection, ftCells As Collection)
    Dim indexCell As Range
    Dim i As Integer
    Dim j As Integer
    
    Set indexCell = Range("B10")
    
    For i = 0 To rtCells.Count - 1
        indexCell.Offset(i * 4, 0).Value = rtCells.Item(i + 1).Value
        For j = 1 To ftCells.Count
            indexCell.Offset(i * 4 + Application.WorksheetFunction.Floor_Math(j / 8) + 1, j Mod 8).Value = ftCells.Item(j).Value
        Next j
    
    Next i
    
    
    
    


End Sub


Private Sub dumbTest()
    Dim i As Integer
    Dim j As Integer
    
    
    
    Debug.Print (Application.WorksheetFunction.Floor_Math(i / 7))

    

End Sub

